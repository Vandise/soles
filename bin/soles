#!/usr/bin/env ruby

require "bundler/setup"
require "soles"
require "erb"
require "thor"
require "irb"
require "active_support/inflector"

module Soles
  class Commands < Thor
    def self.source_root
      File.expand_path File.join(__FILE__, "..", "..", "templates")
    end
    
    include Thor::Actions
    desc "new NAME", "Create a new Soles application in the given directory"
    def new(name, root = Dir.pwd)
      banner "Generating app..."
      self.destination_root = File.expand_path(File.join(root, name))

      directory ".", vars: {
        class_name: name.classify
      }
      copy_file "../bin/soles", "bin/soles"
      chmod "bin/soles", 0755

      Dir.chdir(self.destination_root) do
        banner "Installing dependencies..."
        puts `BUNDLE_GEMFILE=Gemfile bundle`
        banner "App generated!"
        puts `BUNDLE_GEMFILE=Gemfile bundle exec bin/soles help`
        banner "Sanity checking install..."
        puts `BUNDLE_GEMFILE=Gemfile rspec --force-colour`
      end
    end

    desc "console ENV", "boot a console with this application environment"
    def console(env = "development")
      if self.class.application?(true)
        ENV['SOLES_APP'] = env
        puts format("%s %s", ColorizedString["[#{env}]"].colorize(:green), ColorizedString["Welcome to Soles"].colorize(:yellow))
        require_relative "../config/app.rb"
        ARGV.clear
        IRB.start File.expand_path(File.join(__FILE__, "..", ".."))
      end
    end

    def self.app_root
      f = File.expand_path(File.join(Dir.pwd, "config", "app.rb"))
      return f if File.exists?(f)

      f = File.expand_path(File.join(__FILE__, "..", "..", "config", "app.rb"))
      return f if File.exists?(f)

      return nil
    end

    def self.application?(alert = false)
      if app_root
        true
      else
        puts "Create a new application with `soles new appname`" if alert
        false
      end
    end

    no_commands do
      def banner(text)
        shell.say "\n#{text}", :yellow
        shell.say "-" * 80, :yellow
      end
    end
  end
end

require Soles::Commands.app_root if Soles::Commands.application?
Soles::Commands.start